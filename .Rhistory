x <- matrix(1:8,nrow=4,ncol=4)
class(x)
x
makeCacheMatrix(x)
solve(x)
x
x <- matrix(1:16,nrow=4,ncol=4)
solve(x)
x
x <- matrix(data = c(8:1),nrow=4,ncol=4)
x
solve(x)
solve(x) %*% x
x <- matrix(data = c(rep(1:2,2),nrow=2,ncol=2)
)
x
x <- matrix(data = c(rep(1:2,2)),nrow=2,ncol=2)
x
x <- matrix(data = c(rep(1:2,2,byrow=T),nrow=2,ncol=2)
x <- matrix(data = c(rep(1:2,2,byrow=T)),nrow=2,ncol=2)
x
?by.row
?byrow
x <- matrix(data = c(rep(1,2,2,1),nrow=2,ncol=2)
x <- matrix(data = c(1,2,2,1),nrow=2,ncol=2)
x
solve(x)
makeCacheMatrix <- function(x = matrix()) {
b <- NULL # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
get <- function() x
}
x <- matrix(data = c(1,2,2,1),nrow=2,ncol=2)
z <- matrix(data = c(1,2,2,1),nrow=2,ncol=2)
makeCacheMatrix(z)
x
z
b
solve(z)
z
matrix(z)
z <- c(1,2,2,1)
makeCacheMatrix(z)
x
b
solve(z)
solve(matrix(z)
)
z
y
x
rm(list=ls(0))
rm(list=ls(
))
z <- c(1,2,2,1)
makeCacheMatrix <- function(x = matrix(,nrow=(length(z)/2,ncol=length(z)/2,by.row=T))) {
b <- NULL # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
get <- function() x
}
makeCacheMatrix <- function(x = matrix(,nrow=length(z)/2,ncol=length(z)/2,by.row=T)){
b <- NULL # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
get <- function() x
}
solve(z)
makeCacheMatrix(z)
x
b
makeCacheMatrix <- function(x = matrix(,nrow=length(z)/2,ncol=length(z)/2,by.row=T)){
b <- NULL # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
set(x)
}
makeCacheMatrix(z)
x
b
z
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
z
x
x = matrix(,nrow=length(z)/2,ncol=length(z)/2,by.row=T)
x = matrix(,nrow=length(z)/2,ncol=length(z)/2,byrow=T)
x
z
matrix(z,nrow=length(z)/2,ncol=length(z)/2,byrow=T)
x <- matrix(z,nrow=length(z)/2,ncol=length(z)/2,byrow=T)
x
z <- c(1,2,2,1)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
set(y)
}
makeCacheMatrix(z)
x
b
solve(x)
z <- c(1,2,2,1)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(x) # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- b # make 'b', the inverse of 'x' a global variable
}
set(y)
}
makeCacheMatrix(z)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(y) # make 'b', the inverse of 'x' a global variable
}
set(y)
}
makeCacheMatrix(z)
x
b
solve(x)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(y) # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- b # make 'b', the inverse of 'x' a global variable
}
set(y)
}
makeCacheMatrix(z)
x
b
solve(x)
y
b
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(y) # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(y) # make 'b', the inverse of 'x' a global variable
}
set(y)
}
makeCacheMatrix(z)
x
b
b
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(y) # clear out any values in b
set <- function(y){
x <<- y # make input vector 'x' a global variable
b <<- solve(x) # make 'b', the inverse of 'x' a global variable
}
set(y)
}
makeCacheMatrix(z)
x
b
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(y) # clear out any values in b
set <- function(y){
# make input vector 'x' a global variable
x <<- y
# make 'b', the inverse of 'x' a global variable
b <<- solve(x)
}
set(y)
}
makeCacheMatrix(z)
x
y
z
b
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(y) # clear out any values in b
set <- function(y){
# make input vector 'x' a global variable
x <<- y
# make 'b', the inverse of 'x' a global variable
b <<- solve(y)
}
set(y)
}
makeCacheMatrix(z)
b
x
solve(x)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- solve(y) # clear out any values in b
sety <- function(y){
# make input vector 'x' a global variable
x <<- y
}
setb <- function(y){
# make 'b', the inverse of 'x' a global variable
b <<- solve(y)
}
sety(y)
setb(y)
}
makeCacheMatrix(z)
b
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
sety <- function(y){
# make input vector 'x' a global variable
x <<- y
}
setb <- function(y){
# make 'b', the inverse of 'x' a global variable
b <<- solve(y)
}
sety(y)
setb(y)
}
makeCacheMatrix(z)
setb(x)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
sety <- function(y){
# make input vector 'x' a global variable
x <<- y
}
setb <- function(y){
# make 'b', the inverse of 'x' a global variable
b <<- solve(y)
}
print(class(y))
sety(y)
setb(y)
}
makeCacheMatrix(z)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
sety <- function(y){
# make input vector 'x' a global variable
x <<- y
}
setb <- function(y){
# make 'b', the inverse of 'x' a global variable
b <<- solve(y)
}
print(class(y))
print(solve(y))
sety(y)
setb(y)
}
makeCacheMatrix(z)
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
set <- function(y){
# make input vector 'x' a global variable
x <<- y
}
# make 'b', the inverse of 'x' a global variable
b <<- solve(y)
print(class(y))
print(solve(y))
set(y)
}
makeCacheMatrix(z)
b
makeCacheMatrix <- function(x){
y <- matrix(x,nrow=length(x)/2,ncol=length(x)/2,byrow=T)
b <- NULL # clear out any values in b
set <- function(y){
x <<- y
b <<- NULL
}
get <- function() x
setinverse <- function(solve) b <<- solve
getinverse <- function() b
list(set=set, get=get, setinverse=setinverse,getinverse=getinverse)
}
makeCacheMatrix(z)
matrix(z)
z
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:20)
x <- 1:20
makeVector(x)
cachemean(x)
x
makeVector(c(1,2,3,4,5))
d<-makeVector(c(1,2,3,4,5))
d
d$get()
d$getmean()
cachemean(d)
cachemean(d)
d$getmean()
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
e <- makeCacheMatrix(c(1,2,2,1))
e
e$getinverse
e$get()
e$getinverse
e
solve(e$get())
e$get()
set <- function(y) {
x <<- y
m <<- NULL
}
set(c(1,1,1,2))
x
class(x)
y
makeCacheMatrix <- function(x = matrix(numeric(()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix(numeric(())) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix(numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix(numeric()) {
makeCacheMatrix <- function(x = matrix(numeric())) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(c(1,2,2,1))
d<-makeCacheMatrix(c(1,2,2,1))
d$get()
class(d$get())
makeCacheMatrix <- function(x = matrix(numeric(),ncol=(length(x/2)))) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(1,2,2,1)
makeCacheMatrix(c(1,2,2,1)
)
d<-makeCacheMatrix(c(1,2,2,1))
d$get()
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- matrix(data = y, ncol = length(y)/2)
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
d <- makeCacheMatrix(c(1,2,2,1))
d$get()
x
class(x)
y <- c(1,2,2,1)
matrix(data = y, ncol = length(y)/2)
makeCacheMatrix <- function(x = numeric()) {
x <- matrix(data = x, ncol = length(x)/2)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
d<-makeCacheMatrix(c(1,2,2,1)
)
d$get()
d$getinverse()
cachSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(d)
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cachesolve(d)
cacheSolve(d)
d$getinverse
d$getinverse()
